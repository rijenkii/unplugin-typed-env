import * as fs from "node:fs";

import type { UnpluginFactory } from "unplugin";

import type { Field } from "./field.js";

const virtualModuleId = "virtual:typed-env";
const resolvedVirtualModuleId = "\0" + virtualModuleId;

export type Options = {
  /** Schema for the environment variable validation. */
  schema: Record<string, Field>;
  /**
   * Location of the generated `.d.ts` file with configuration module type declarations.
   * @default "./typed-env.d.ts"
   */
  dts?: string;
};

export function generateJavaScriptFile(schema: Record<string, Field>) {
  let jsSrc = "";
  for (const [fieldName, field] of Object.entries(schema)) {
    try {
      const fieldValue = field.parse(process.env[fieldName]);
      jsSrc += `export const ${fieldName} = ${fieldValue};\n`;
    } catch (cause) {
      throw new Error(
        `Error while parsing field ${JSON.stringify(fieldName)}`,
        { cause },
      );
    }
  }
  return jsSrc;
}

export function generateDefinitionsFile(schema: Record<string, Field>) {
  let dtsSrc = "";
  dtsSrc += "/* eslint-disable */\n";
  dtsSrc += "/* prettier-ignore */\n";
  dtsSrc += "// @ts-nocheck\n";
  dtsSrc +=
    "// Generated by unplugin-typed-env. !! DO NOT MODIFY THIS FILE !!\n";
  dtsSrc += "// It's recommended to commit this file.\n";
  dtsSrc +=
    '// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry."\n';
  dtsSrc += "\n";

  for (const [fieldName, field] of Object.entries(schema)) {
    const fieldType = field.type;
    dtsSrc += `export const ${fieldName}: ${fieldType};\n`;
  }
  return dtsSrc;
}

export const unpluginFactory: UnpluginFactory<Options> = (options) => {
  const { schema, dts = "./typed-env.d.ts" } = options;

  const jsSrc = generateJavaScriptFile(schema);
  const dtsSrc = generateDefinitionsFile(schema);

  fs.writeFileSync(dts, dtsSrc);

  return {
    name: "unplugin-typed-env",
    resolveId(id) {
      if (id !== virtualModuleId) return;
      return resolvedVirtualModuleId;
    },
    load(id) {
      if (id !== resolvedVirtualModuleId) return;
      return jsSrc;
    },
  };
};
