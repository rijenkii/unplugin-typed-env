import type { Field } from "./field.js";

export function js(schema: Record<string, Field>): string {
  let jsSrc = "";
  for (const [fieldName, field] of Object.entries(schema)) {
    try {
      const fieldValue = field.parse(process.env[fieldName]);
      jsSrc += `export const ${fieldName} = ${fieldValue};\n`;
    } catch (cause) {
      throw new Error(
        `Error while parsing field ${JSON.stringify(fieldName)}`,
        { cause },
      );
    }
  }
  return jsSrc;
}

export function dts(schema: Record<string, Field>): string {
  let dtsSrc = "";
  dtsSrc += "/* eslint-disable */\n";
  dtsSrc += "/* prettier-ignore */\n";
  dtsSrc += "// @ts-nocheck\n";
  dtsSrc +=
    "// Generated by unplugin-typed-env. !! DO NOT MODIFY THIS FILE !!\n";
  dtsSrc += "// It's recommended to commit this file.\n";
  dtsSrc +=
    '// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry."\n';
  dtsSrc += "\n";
  dtsSrc += 'declare module "virtual:typed-env" {\n';

  for (const [fieldName, field] of Object.entries(schema)) {
    const fieldType = field.type;
    dtsSrc += `export const ${fieldName}: ${fieldType};\n`;
  }

  dtsSrc += "}\n";

  return dtsSrc;
}
